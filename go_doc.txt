$Packages

*Every Go program is made up of packages.
*Programs start running in package main.

$Package "math/rand"

*Package "math/rand" has following functions:
	1.rand.Seed(seed int64) // safe for concurrent use, uses provided seed number to make the generated random number more random
	2.rand.Intn(n int) int // returns non-negative random int value from 0 till n

$Exported names

*In Go, a name is exported if it begins with a capital letter. For example, Pizza is an exported name, as is Pi, which is exported from the math package.
*When importing a package, you can refer only to its exported names. Any "unexported" names are not accessible from outside the package.

$Functions

*A function can take zero or more arguments.
*In this example, add takes two parameters of type int.
*Notice that the type comes after the variable name.

func add(x int, y int) int {
	return x + y
}

*When two or more consecutive named function parameters share a type, you can omit the type from all but the last.

func add(x, y int) int {
	return x + y
}

*A function can return any number of results.

func swap(x, y string) (string, string) {
	return y, x
}

func main() {
	a, b := swap("hello", "world")
	fmt.Println(a, b)
}

$Named return values

*Go's return values may be named. If so, they are treated as variables defined at the top of the function.

*These names should be used to document the meaning of the return values.

*A return statement without arguments returns the named return values. This is known as a "naked" return.

*Naked return statements should be used only in short functions, as with the example shown here. They can harm readability in longer functions.

func split(sum int) (x, y int) {
	x = sum * 4 / 9
	y = sum - x
	return	// returns x and y
}

$Variables

*The var statement declares a list of variables; as in function argument lists, the type is last.

*A var statement can be at package or function level. 

package main

import "fmt"

var c, python, java bool

func main() {
	var i int
	fmt.Println(i, c, python, java)
}

*A var declaration can include initializers, one per variable.

*If an initializer is present, the type can be omitted; the variable will take the type of the initializer.

var i, j int = 1, 2
var c, python, java = true, false, "no!"

*Inside a function, the := short assignment statement can be used in place of a var declaration with implicit type.

*Outside a function, every statement begins with a keyword (var, func, and so on) and so the := construct is not available.

$Basic Types

*Go's basic types are

	bool

	string

	int  int8  int16  int32  int64
	uint uint8 uint16 uint32 uint64 uintptr

	byte // alias for uint8

	rune // alias for int32
		// represents a Unicode code point

	float32 float64

	complex64 complex128

*The example shows variables of several types, and also that variable declarations may be "factored" into blocks, as with import statements.

var (
	ToBe   bool       = false
	MaxInt uint64     = 1<<64 - 1
	z      complex128 = cmplx.Sqrt(-5 + 12i)
)

*The int, uint, and uintptr types are usually 32 bits wide on 32-bit systems and 64 bits wide on 64-bit systems. When you need an integer value you should use int unless you have a specific reason to use a sized or unsigned integer type.

*Variables declared without an explicit initial value are given their zero value.

*The zero value is:

	0 for numeric types,
	false for the boolean type, and
	"" (the empty string) for strings.

$Type Conversions

*The expression T(v) converts the value v to the type T.

*Some numeric conversions:

	var i int = 42
	var f float64 = float64(i)
	var u uint = uint(f)

or more simply

	i := 42
	f := float64(i)
	u := uint(f)

*Unlike in C, in Go assignment between items of different type requires an explicit conversion. Try removing the float64 or uint conversions in the example and see what happens.

$Constants

*Constants are declared like variables, but with the const keyword.

*Constants can be character, string, boolean, or numeric values.

*Constants cannot be declared using the := syntax.

$For loop

*The init and post statements are optional.

for ; sum < 1000; {
		sum += sum
	}

*At that point you can drop the semicolons: C's while is spelled for in Go.

for sum < 1000 {
		sum += sum
	}

$If

*Go's if statements are like its for loops; the expression need not be surrounded by parentheses ( ) but the braces { } are required.

*Like for, the if statement can start with a short statement to execute before the condition.

*Variables declared by the statement are only in scope until the end of the if.

func pow(x, n, lim float64) float64 {
	if v := math.Pow(x, n); v < lim {
		return v
	}
	return lim
}

*Variables declared inside an if short statement are also available inside any of the else blocks.

$Switch

*A switch statement is a shorter way to write a sequence of if - else statements. It runs the first case whose value is equal to the condition expression.

*Go's switch is like the one in C, C++, Java, JavaScript, and PHP, except that Go only runs the selected case, not all the cases that follow. In effect, the break statement that is needed at the end of each case in those languages is provided automatically in Go. Another important difference is that Go's switch cases need not be constants, and the values involved need not be integers.

*Switch without a condition is the same as switch true.

*This construct can be a clean way to write long if-then-else chains.

$Defer

*A defer statement defers the execution of a function until the surrounding function returns.

*The deferred call's arguments are evaluated immediately, but the function call is not executed until the surrounding function returns.

func main() {
	defer fmt.Println("world")

	fmt.Println("hello")
}

*Deferred function calls are pushed onto a stack. When a function returns, its deferred calls are executed in last-in-first-out order.

for i := 0; i < 10; i++ {
		defer fmt.Println(i)
}	// prints 9 8 7 6 5 ...

$Pointers

func main() {
	i, j := 42, 2701

	p := &i         // point to i
	fmt.Println(*p) // read i through the pointer
	*p = 21         // set i through the pointer
	fmt.Println(i)  // see the new value of i

	p = &j         // point to j
	*p = *p / 37   // divide j through the pointer
	fmt.Println(j) // see the new value of j
}

$Structs

*A struct is a collection of fields.

type Vertex struct {
	X int
	Y int
}

func main() {
	fmt.Println(Vertex{1, 2})
}

*Struct fields are accessed using a dot.

v := Vertex{1, 2}
v.X = 4
fmt.Println(v.X)

*Struct fields can be accessed through a struct pointer.

*To access the field X of a struct when we have the struct pointer p we could write (*p).X. However, that notation is cumbersome, so the language permits us instead to write just p.X, without the explicit dereference.

v := Vertex{1, 2}
p := &v
p.X = 1e9
fmt.Println(v)

*A struct literal denotes a newly allocated struct value by listing the values of its fields.

*You can list just a subset of fields by using the Name: syntax. (And the order of named fields is irrelevant.)

*The special prefix & returns a pointer to the struct value.

var (
	v1 = Vertex{1, 2}  // has type Vertex
	v2 = Vertex{X: 1}  // Y:0 is implicit
	v3 = Vertex{}      // X:0 and Y:0
	p  = &Vertex{1, 2} // has type *Vertex
)

$Arrays

func main() {
	var a [2]string
	a[0] = "Hello"
	a[1] = "World"
	fmt.Println(a[0], a[1])
	fmt.Println(a)

	primes := [6]int{2, 3, 5, 7, 11, 13}
	fmt.Println(primes)
}

*An array's length is part of its type, so arrays cannot be resized. This seems limiting, but don't worry; Go provides a convenient way of working with arrays.

$Slices

*An array has a fixed size. A slice, on the other hand, is a dynamically-sized, flexible view into the elements of an array. In practice, slices are much more common than arrays.

*A slice is formed by specifying two indices, a low and high bound, separated by a colon:

a[low : high]

*This selects a half-open range which includes the first element, but excludes the last one.

func main() {
	primes := [6]int{2, 3, 5, 7, 11, 13}

	var s []int = primes[1:4]
	fmt.Println(s)
	s = primes[1:5]
	fmt.Println(s)
}

*Slices are like references to arrays

*A slice does not store any data, it just describes a section of an underlying array.

*Changing the elements of a slice modifies the corresponding elements of its underlying array.

*Other slices that share the same underlying array will see those changes.

func main() {
	names := [4]string{
		"John",
		"Paul",
		"George",
		"Ringo",
	}
	fmt.Println(names)

	a := names[0:2]
	b := names[1:3]
	fmt.Println(a, b)

	b[0] = "XXX"
	fmt.Println(a, b)
	fmt.Println(names)
}

*A slice literal is like an array literal without the length.

*This is an array literal:

[3]bool{true, true, false}

*And this creates the same array as above, then builds a slice that references it:

[]bool{true, true, false}

func main() {
	q := []int{2, 3, 5, 7, 11, 13}
	fmt.Println(q)

	r := []bool{true, false, true, true, false, true}
	fmt.Println(r)

	s := []struct {
		i int
		b bool
	}{
		{2, true},
		{3, false},
		{5, true},
		{7, true},
		{11, false},
		{13, true},
	}
	fmt.Println(s)
}

*When slicing, you may omit the high or low bounds to use their defaults instead.

*The default is zero for the low bound and the length of the slice for the high bound.

func main() {
	s := []int{2, 3, 5, 7, 11, 13}

	s = s[1:4]
	fmt.Println(s)

	s = s[:2]
	fmt.Println(s)

	s = s[1:]
	fmt.Println(s)
}

*A slice has both a length and a capacity.

*The length of a slice is the number of elements it contains.

*The capacity of a slice is the number of elements in the underlying array, counting from the first element in the slice.

*The length and capacity of a slice s can be obtained using the expressions len(s) and cap(s).

*You can extend a slice's length by re-slicing it, provided it has sufficient capacity.

*The zero value of a slice is nil.

*A nil slice has a length and capacity of 0 and has no underlying array.

*Slices can be created with the built-in make function; this is how you create dynamically-sized arrays.

*The make function allocates a zeroed array and returns a slice that refers to that array:

a := make([]int, 5)  // len(a)=5

*To specify a capacity, pass a third argument to make:

b := make([]int, 0, 5) // len(b)=0, cap(b)=5

b = b[:cap(b)] // len(b)=5, cap(b)=5
b = b[1:]      // len(b)=4, cap(b)=4

*It is common to append new elements to a slice, and so Go provides a built-in append function. The documentation of the built-in package describes append.

func append(s []T, vs ...T) []T

*The first parameter s of append is a slice of type T, and the rest are T values to append to the slice.

*The resulting value of append is a slice containing all the elements of the original slice plus the provided values.

*If the backing array of s is too small to fit all the given values a bigger array will be allocated. The returned slice will point to the newly allocated array.

$Range

*The range form of the for loop iterates over a slice or map.

*When ranging over a slice, two values are returned for each iteration. The first is the index, and the second is a copy of the element at that index.

var pow = []int{1, 2, 4, 8, 16, 32, 64, 128}

func main() {
	for i, v := range pow {
		fmt.Printf("2**%d = %d\n", i, v)
	}
} // 2**0 = 1, 2**1 = 2

*You can skip the index or value by assigning to _.

*If you only want the index, drop the , value entirely.

$Maps

*A map maps keys to values.

*The zero value of a map is nil. A nil map has no keys, nor can keys be added.

*The make function returns a map of the given type, initialized and ready for use.

type Vertex struct {
	Lat, Long float64
}

var m map[string]Vertex

func main() {
	m = make(map[string]Vertex)
	m["Bell Labs"] = Vertex{
		40.68433, -74.39967,
	}
	fmt.Println(m["Bell Labs"])
}

*Map literals are like struct literals, but the keys are required.

type Vertex struct {
	Lat, Long float64
}

var m = map[string]Vertex{
	"Bell Labs": Vertex{
		40.68433, -74.39967,
	},
	"Google": Vertex{
		37.42202, -122.08408,
	},
}

*If the top-level type is just a type name, you can omit it from the elements of the literal.

var m = map[string]Vertex{
	"Bell Labs": {40.68433, -74.39967},
	"Google":    {37.42202, -122.08408},
}

*Insert or update an element in map m:

m[key] = elem
*Retrieve an element:

elem = m[key]
*Delete an element:

delete(m, key)
*Test that a key is present with a two-value assignment:

elem, ok = m[key]
*If key is in m, ok is true. If not, ok is false.

*If key is not in the map, then elem is the zero value for the map's element type.

*Note: If elem or ok have not yet been declared you could use a short declaration form:

elem, ok := m[key]

$Function values

func compute(fn func(float64, float64) float64) float64 {
	return fn(3, 4)
}

func main() {
	hypot := func(x, y float64) float64 {
		return math.Sqrt(x*x + y*y)
	}
	fmt.Println(hypot(5, 12))

	fmt.Println(compute(hypot))
	fmt.Println(compute(math.Pow))
}

$Function closures

*Go functions may be closures. A closure is a function value that references variables from outside its body. The function may access and assign to the referenced variables; in this sense the function is "bound" to the variables.

*For example, the adder function returns a closure. Each closure is bound to its own sum variable.

func adder() func(int) int {
	sum := 0
	return func(x int) int {
		sum += x
		return sum
	}
}

$Methods

*Go does not have classes. However, you can define methods on types.

*A method is a function with a special receiver argument.

*The receiver appears in its own argument list between the func keyword and the method name.

*In this example, the Abs method has a receiver of type Vertex named v.

type Vertex struct {
	X, Y float64
}

func (v Vertex) Abs() float64 {
	return math.Sqrt(v.X*v.X + v.Y*v.Y)
}

*You can declare a method on non-struct types, too.

*In this example we see a numeric type MyFloat with an Abs method.

type MyFloat float64

func (f MyFloat) Abs() float64 {
	if f < 0 {
		return float64(-f)
	}
	return float64(f)
}

*You can only declare a method with a receiver whose type is defined in the same package as the method. You cannot declare a method with a receiver whose type is defined in another package (which includes the built-in types such as int).

$Pointer receivers

*You can declare methods with pointer receivers.

*This means the receiver type has the literal syntax *T for some type T. (Also, T cannot itself be a pointer such as *int.)

type Vertex struct {
	X, Y float64
}

func (v *Vertex) Scale(f float64) {
	v.X = v.X * f
	v.Y = v.Y * f
}

*Methods with pointer receivers can modify the value to which the receiver points (as Scale does here). Since methods often need to modify their receiver, pointer receivers are more common than value receivers.